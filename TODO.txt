* Upgrade to newest Dropbox Ruby SDK.
* Look into using the new /chunked_upload support instead of custom streaming upload.
* Look into using /delta api.
* Try to get rid of extra updated dirs on pull after push (have push update all the mtimes and such that it affects, so the pull is clean). -- This will clean up the tests more than anything.
* Ensure Dropbox API best practices are being followed as closely as possible (https://www.dropbox.com/developers/reference/bestpractice).
* Look into occasional hanging on pull operations.
* Look into memory leak when syncing a large amount of files.
* Look into 10000 file limit on metadata operations.
* Look into occasional creation of (1) conflict files when there isn't a conflict (timestamps changing, maybe?).
* Make Dbox case insentive on case sensitive filesystems, as Dropbox is case insensitive.
* Refactor threading in change detection in pull to use ParallelTasks?
* Saving SQLite db changes dir timestamp -- try to preserve it?
* See if prepared statements speed up operations on large repos much
* Look down directory tree until you hit a .dbox.sqlite3 file so you can use commands from anywhere inside a tree (like git)
* Add support for partial push/pull (subtree push/pull)?
