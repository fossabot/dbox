#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'dbox'
require 'json'
require 'thor'

class DboxCLI < Thor
  package_name Dbox

  ENV_VAR_INFO = <<EOS
Environment varables needed for everything:
  export DROPBOX_APP_KEY=cmlrrjd3j0gbend
  export DROPBOX_APP_SECRET=uvuulp75xf9jffl

Environment varables needed for everything other than authorize:
  export DROPBOX_AUTH_KEY=v4d7l1rez1czksn
  export DROPBOX_AUTH_SECRET=pqej9rmnj0i1gcxr4
  export DROPBOX_ACCESS_TYPE=dropbox || app_folder (defaults to dropbox)

See http://github.com/kenpratt/dbox for examples and more information
EOS

  desc 'authorize', 'Generate auth keys'
  def authorize
    Dbox.authorize
  end

  desc 'create <remote_path> [<local_path>]', 'Create a new folder on Dropbox'
  def create(remote_path, local_path = nil)
    Dbox.create(remote_path, local_path)
  end

  desc 'list <remote_path>', 'List files and directories in Dropbox folder'
  def list(remote_path)
    Dbox.list(remote_path)
  end

  desc 'clone <remote_path> [<local_path>]', 'Clone an existing Dropbox folder'
  option :subdir
  def clone(remote_path, local_path = nil)
    Dbox.clone(remote_path, local_path, options)
  end

  desc 'pull [<local_path>]', 'Pull changes from Dropbox'
  option :subdir
  option :blacklisted_extensions
  def pull(local_path = '.')
    Dbox.pull(local_path, options)
  end

  desc 'push [<local_path>]', 'Push changes to Dropbox'
  option :subdir
  option :blacklisted_extensions
  def push(local_path = '.')
    Dbox.push(local_path, options)
  end

  desc 'sync [<local_path>]', 'Sync changes to Dropbox'
  option :subdir
  def sync(local_path = '.')
    Dbox.sync(local_path, options)
  end

  desc 'move <new_remote_path> [<local_path>]', 'Move the remote Dropbox folder to a new location'
  def move(new_remote_path, local_path = '.')
    Dbox.move(new_remote_path, local_path)
  end

  desc 'delete <remote_path> [<local_path>]', 'Delete a Dropbox folder (local path optional, it will be deleted too if provided)'
  def delete(remote_path, local_path = nil)
    Dbox.delete(remote_path, local_path)
  end

  desc 'clone_or_pull <remote_path> [<local_path>]', 'Clone an existing Dropbox folder, or pull if it already exists locally'
  option :subdir
  def clone_or_pull(remote_path, local_path = nil)
    Dbox.clone_or_pull(remote_path, local_path, options)
  end

  def help(*args)
    super
    shell.say ENV_VAR_INFO
  end
end

DboxCLI.start(ARGV)
